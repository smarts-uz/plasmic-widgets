// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7bKSoynR3noLe1Sg3WTwkN
// Component: Hvg1mW7ciyAX
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7bKSoynR3noLe1Sg3WTwkN/projectcss
import sty from "./PlasmicCollapse.module.css"; // plasmic-import: Hvg1mW7ciyAX/css

createPlasmicElementProxy;

export const PlasmicCollapse__VariantProps = new Array();

export const PlasmicCollapse__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCollapse__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "collapse.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        onMutate: generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    club: usePlasmicDataOp(() => {
      return {
        sourceId: "8rKkMkxSryxAdgxU85iBaF",
        opId: "b71e4d93-1d8b-4428-a8b9-10bd6b416f0e",
        userArgs: {},
        cacheKey: `plasmic.$.b71e4d93-1d8b-4428-a8b9-10bd6b416f0e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    player: usePlasmicDataOp(() => {
      return {
        sourceId: "8rKkMkxSryxAdgxU85iBaF",
        opId: "c4be717f-3181-434e-a73a-d81fdb71d6e3",
        userArgs: {},
        cacheKey: `plasmic.$.c4be717f-3181-434e-a73a-d81fdb71d6e3.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          {(() => {
            const child$Props = {
              bordered: true,
              className: classNames("__wab_instance", sty.collapse),
              defaultOpen: false,
              destroyInactivePanel: false,
              disabled: false,
              forceRender: false,
              label2: (
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.club.data[0].name;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Collapse Header";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              ),

              onChange: generateStateOnChangePropForCodeComponents(
                $state,
                "open",
                ["collapse", "open"],
                AntdSingleCollapse_Helpers
              ),
              open: generateStateValueProp($state, ["collapse", "open"]),
              showArrow: true
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "open",
                  plasmicStateName: "collapse.open"
                }
              ],

              [],
              AntdSingleCollapse_Helpers ?? {},
              child$Props
            );
            return (
              <AntdSingleCollapse
                data-plasmic-name={"collapse"}
                data-plasmic-override={overrides.collapse}
                {...child$Props}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $queries.player.data[3].id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pzy55
                      )}
                      key={currentIndex}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.player.data[1].name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Collapsible text...";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  );
                })}
              </AntdSingleCollapse>
            );
          })()}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "collapse"],
  collapse: ["collapse"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCollapse__ArgProps,
          internalVariantPropNames: PlasmicCollapse__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCollapse__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCollapse";
  } else {
    func.displayName = `PlasmicCollapse.${nodeName}`;
  }
  return func;
}

export const PlasmicCollapse = Object.assign(
  // Top-level PlasmicCollapse renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    collapse: makeNodeComponent("collapse"),
    // Metadata about props expected for PlasmicCollapse
    internalVariantProps: PlasmicCollapse__VariantProps,
    internalArgProps: PlasmicCollapse__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCollapse;
/* prettier-ignore-end */

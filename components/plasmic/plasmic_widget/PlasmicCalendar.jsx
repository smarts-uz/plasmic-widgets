// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7bKSoynR3noLe1Sg3WTwkN
// Component: SJwz5LhiJ7SG
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import { RichCalendar } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-calendar";
import { calendarHelpers as RichCalendar_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-calendar";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 7bKSoynR3noLe1Sg3WTwkN/projectcss
import sty from "./PlasmicCalendar.module.css"; // plasmic-import: SJwz5LhiJ7SG/css

createPlasmicElementProxy;

export const PlasmicCalendar__VariantProps = new Array();

export const PlasmicCalendar__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCalendar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "calendar.mode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "month",
        onMutate: generateOnMutateForSpec("mode", RichCalendar_Helpers)
      },
      {
        path: "calendar.selectedDate",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.calendar.selectedDate;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),
        onMutate: generateOnMutateForSpec("selectedDate", RichCalendar_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "8rKkMkxSryxAdgxU85iBaF",
        opId: "36cf51a7-6414-4129-963b-7d282da4520b",
        userArgs: {},
        cacheKey: `plasmic.$.36cf51a7-6414-4129-963b-7d282da4520b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.calendar),
              color: (() => {
                const __composite = { fieldId: null };
                __composite["fieldId"] = "home_id";
                return __composite;
              })(),
              data: (() => {
                try {
                  return $queries.query;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })(),
              date: (() => {
                const __composite = {
                  key: "away_id",
                  fieldId: null,
                  role: "date"
                };
                __composite["fieldId"] = "starts_at";
                return __composite;
              })(),
              defaultValue: (() => {
                try {
                  return $state.calendar.selectedDate;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })(),
              mode: generateStateValueProp($state, ["calendar", "mode"]),
              onChange: generateStateOnChangePropForCodeComponents(
                $state,
                "selectedDate",
                ["calendar", "selectedDate"],
                RichCalendar_Helpers
              ),
              onPanelChange: generateStateOnChangePropForCodeComponents(
                $state,
                "mode",
                ["calendar", "mode"],
                RichCalendar_Helpers
              ),
              value: generateStateValueProp($state, [
                "calendar",
                "selectedDate"
              ])
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "mode",
                  plasmicStateName: "calendar.mode"
                },
                {
                  name: "selectedDate",
                  plasmicStateName: "calendar.selectedDate"
                }
              ],

              [],
              RichCalendar_Helpers ?? {},
              child$Props
            );
            return (
              <RichCalendar
                data-plasmic-name={"calendar"}
                data-plasmic-override={overrides.calendar}
                {...child$Props}
              />
            );
          })()}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "calendar"],
  calendar: ["calendar"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCalendar__ArgProps,
          internalVariantPropNames: PlasmicCalendar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCalendar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCalendar";
  } else {
    func.displayName = `PlasmicCalendar.${nodeName}`;
  }
  return func;
}

export const PlasmicCalendar = Object.assign(
  // Top-level PlasmicCalendar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    calendar: makeNodeComponent("calendar"),
    // Metadata about props expected for PlasmicCalendar
    internalVariantProps: PlasmicCalendar__VariantProps,
    internalArgProps: PlasmicCalendar__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCalendar;
/* prettier-ignore-end */
